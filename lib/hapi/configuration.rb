# hapi
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Hapi

  Logging.logger.root.appenders = Logging.appenders.stdout
  Logging.logger.root.level = :info

  # An enum for SDK environments.
  class Environment
    # SANDBOX: Sandbox
    # PRODUCTION: Production
    ENVIRONMENT = [
      SANDBOX = 'sandbox'.freeze,
      PRODUCTION = 'production'.freeze
    ].freeze
  end

  # An enum for API servers.
  class Server
    SERVER = [
      DEFAULT = 'default'.freeze
    ].freeze
  end

  # All configuration including auth info and base URI for the API access
  # are configured in this class.
  class Configuration
    # The attribute readers for properties.
    attr_reader :http_client, :connection, :timeout, :max_retries, :retry_interval, :backoff_factor,
                :retry_statuses, :retry_methods, :environment, :skip_ssl_cert_verification

    class << self
      attr_reader :environments
    end

    def initialize(connection: nil, timeout: 60, max_retries: 0,
                   retry_interval: 1, backoff_factor: 2,
                   retry_statuses: [408, 413, 429, 500, 502, 503, 504, 521, 522, 524],
                   retry_methods: %i[get put],
                   environment: Environment::SANDBOX,
                   skip_ssl_cert_verification: false)
      # The Faraday connection object passed by the SDK user for making requests
      @connection = connection

      # The value to use for connection timeout
      @timeout = timeout

      # The number of times to retry an endpoint call if it fails
      @max_retries = max_retries

      # Pause in seconds between retries
      @retry_interval = retry_interval

      # The amount to multiply each successive retry's interval amount
      # by in order to provide backoff
      @backoff_factor = backoff_factor

      # A list of HTTP statuses to retry
      @retry_statuses = retry_statuses

      # A list of HTTP methods to retry
      @retry_methods = retry_methods

      # Current API environment
      @environment = String(environment)

      # Set to true to allow skipping ssl certificate verification
      @skip_ssl_cert_verification = skip_ssl_cert_verification

      # The Http Client to use for making requests.
      @http_client = create_http_client
    end

    def clone_with(connection: nil, timeout: nil, max_retries: nil,
                   retry_interval: nil, backoff_factor: nil,
                   retry_statuses: nil, retry_methods: nil, environment: nil,
                   skip_ssl_cert_verification: nil)
      connection ||= self.connection
      timeout ||= self.timeout
      max_retries ||= self.max_retries
      retry_interval ||= self.retry_interval
      backoff_factor ||= self.backoff_factor
      retry_statuses ||= self.retry_statuses
      retry_methods ||= self.retry_methods
      environment ||= self.environment
      skip_ssl_cert_verification ||= self.skip_ssl_cert_verification

      Configuration.new(connection: connection, timeout: timeout,
                        max_retries: max_retries,
                        retry_interval: retry_interval,
                        backoff_factor: backoff_factor,
                        retry_statuses: retry_statuses,
                        retry_methods: retry_methods, environment: environment,
                        skip_ssl_cert_verification: skip_ssl_cert_verification)
    end

    def create_http_client
      FaradayClient.new(timeout: timeout, max_retries: max_retries,
                        retry_interval: retry_interval,
                        backoff_factor: backoff_factor,
                        retry_statuses: retry_statuses,
                        retry_methods: retry_methods, connection: connection,
                        verify: !skip_ssl_cert_verification)
    end

    # All the environments the SDK can run in.
    ENVIRONMENTS = {
      Environment::SANDBOX => {
        Server::DEFAULT => 'https://marketplace-sandbox.api.vonq.com/'
      },
      Environment::PRODUCTION => {
        Server::DEFAULT => 'https://marketplace.api.vonq.com/'
      }
    }.freeze

    # Generates the appropriate base URI for the environment and the server.
    # @param [Configuration::Server] The server enum for which the base URI is
    # required.
    # @return [String] The base URI.
    def get_base_uri(server = Server::DEFAULT)
      ENVIRONMENTS[environment][server].clone
    end
  end
end
