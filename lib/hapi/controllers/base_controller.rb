# hapi
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Hapi
  # BaseController.
  class BaseController
    attr_accessor :config, :http_call_back

    def initialize(config, http_call_back: nil)
      @config = config
      @http_call_back = http_call_back

      @global_headers = {
        'user-agent' => get_user_agent
      }
      @logger = Logging.logger[self]
      @logger.info("Instantiated controller class.")
    end

    def validate_parameters(args)
      args.each do |_name, value|
        raise ArgumentError, "Required parameter #{_name} cannot be nil." if value.nil?
      end
    end

    def execute_request(request, binary: false, name: nil)
      @logger.info("Calling the on_before_request method of http_call_back for #{name}.") if @http_call_back
      @http_call_back&.on_before_request(request)

      @logger.info("Merging global headers with endpoint headers for #{name}.")
      APIHelper.clean_hash(request.headers)
      request.headers.merge!(@global_headers)

      @logger.debug("Raw request for #{name} is: #{request.inspect}")
      response = if binary
                   config.http_client.execute_as_binary(request)
                 else
                   config.http_client.execute_as_string(request)
                 end
      @logger.debug("Raw response for #{name} is: #{response.inspect}")
      @logger.info("Calling on_after_response method of http_call_back for #{name}.") if @http_call_back
      @http_call_back&.on_after_response(response)

      response
    end

    def validate_response(response)
      raise APIException.new 'HTTP Response Not OK', response unless
        response.status_code.between?(200, 208) # [200,208] = HTTP OK
    end

    def get_user_agent
      user_agent = 'APIMATIC 3.0'
      user_agent
    end
  end
end
