# hapi
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Hapi
  # ContractsController
  class ContractsController < BaseController
    def initialize(config, http_call_back: nil)
      super(config, http_call_back: http_call_back)
    end

    # This endpoint exposes a list of channels with support for contracts. For
    # all of the required details for creating a contract or a campaign for each
    # channel, please call the "Retrieve details for channel with support for
    # contracts".
    # @param [String] search Optional parameter: A search term.
    # @param [Integer] limit Optional parameter: Number of results to return per
    # page.
    # @param [Integer] offset Optional parameter: The initial index from which
    # to return the results.
    # @param [AcceptLanguageEnum] accept_language Optional parameter: The
    # language the client prefers.
    # @return [ListChannelsResponseModel] response from the API call
    def list_channels(search: nil,
                      limit: nil,
                      offset: nil,
                      accept_language: nil)
      begin
        @logger.info("list_channels called.")
        # Prepare query url.
        @logger.info("Preparing query URL for list_channels.")
        _query_builder = config.get_base_uri
        _query_builder << '/products/channels/mocs/'
        _query_builder = APIHelper.append_url_with_query_parameters(
          _query_builder,
          'search' => search,
          'limit' => limit,
          'offset' => offset
        )
        _query_url = APIHelper.clean_url _query_builder
  
        # Prepare headers.
        @logger.info("Preparing headers for list_channels.")
        _headers = {
          'accept' => 'application/json',
          'Accept-Language' => accept_language
        }
  
        # Prepare and execute HttpRequest.
        @logger.info('Preparing and executing HttpRequest for list_channels.')
        _request = config.http_client.get(
          _query_url,
          headers: _headers
        )
        _response = execute_request(_request, name: 'list_channels')
        validate_response(_response)
  
        # Return appropriate response type.
        @logger.info("Returning response for list_channels.")
        decoded = APIHelper.json_deserialize(_response.raw_body)
        ListChannelsResponseModel.from_hash(decoded)

      rescue Exception => e
        @logger.error(e)
        raise e
      end
    end

    # This endpoint exposes the details of a channel with support for
    # contracts,as well as all the required details for creating a contract or a
    # campaign for each channel.
    # @param [String] channel_id Required parameter: ID of the channel
    # @param [AcceptLanguageEnum] accept_language Optional parameter: The
    # language the client prefers.
    # @return [ChannelModel] response from the API call
    def retrieve_channel(channel_id,
                         accept_language: nil)
      begin
        @logger.info("retrieve_channel called.")
        # Prepare query url.
        @logger.info("Preparing query URL for retrieve_channel.")
        _query_builder = config.get_base_uri
        _query_builder << '/products/channels/mocs/{channel_id}'
        _query_builder = APIHelper.append_url_with_template_parameters(
          _query_builder,
          'channel_id' => { 'value' => channel_id, 'encode' => true }
        )
        _query_url = APIHelper.clean_url _query_builder
  
        # Prepare headers.
        @logger.info("Preparing headers for retrieve_channel.")
        _headers = {
          'accept' => 'application/json',
          'Accept-Language' => accept_language
        }
  
        # Prepare and execute HttpRequest.
        @logger.info('Preparing and executing HttpRequest for retrieve_channel.')
        _request = config.http_client.get(
          _query_url,
          headers: _headers
        )
        _response = execute_request(_request, name: 'retrieve_channel')
        validate_response(_response)
  
        # Return appropriate response type.
        @logger.info("Returning response for retrieve_channel.")
        decoded = APIHelper.json_deserialize(_response.raw_body)
        ChannelModel.from_hash(decoded)

      rescue Exception => e
        @logger.error(e)
        raise e
      end
    end

    # This endpoint exposes a list of contract available to a particular
    # customer.
    # @param [String] x_customer_id Required parameter: An identifier for the
    # remote customer
    # @param [Float] limit Optional parameter: Amount of contracts returned
    # @param [Float] offset Optional parameter: Starting point
    # @return [ListContractsResponseModel] response from the API call
    def list_contracts(x_customer_id,
                       limit: nil,
                       offset: nil)
      begin
        @logger.info("list_contracts called.")
        # Prepare query url.
        @logger.info("Preparing query URL for list_contracts.")
        _query_builder = config.get_base_uri
        _query_builder << '/contracts/'
        _query_builder = APIHelper.append_url_with_query_parameters(
          _query_builder,
          'limit' => limit,
          'offset' => offset
        )
        _query_url = APIHelper.clean_url _query_builder
  
        # Prepare headers.
        @logger.info("Preparing headers for list_contracts.")
        _headers = {
          'accept' => 'application/json',
          'X-Customer-Id' => x_customer_id
        }
  
        # Prepare and execute HttpRequest.
        @logger.info('Preparing and executing HttpRequest for list_contracts.')
        _request = config.http_client.get(
          _query_url,
          headers: _headers
        )
        _response = execute_request(_request, name: 'list_contracts')
        validate_response(_response)
  
        # Return appropriate response type.
        @logger.info("Returning response for list_contracts.")
        decoded = APIHelper.json_deserialize(_response.raw_body)
        ListContractsResponseModel.from_hash(decoded)

      rescue Exception => e
        @logger.error(e)
        raise e
      end
    end

    # This endpoint creates a new customer contract. It requires a reference to
    # a channel, a credential payload, and the facets set for the contracted
    # product.
    # HAPI doesn't support contract editing, because job boards require the same
    # credentials to be able to delete already posted jobs via that contract at
    # a later moment. Otherwise, deleting jobs would not be possible. To edit
    # contract credentials, the credentials need to be deleted first, and then
    # recreated. When deleted, all corresponding jobs can't be deleted anymore
    # @param [String] x_customer_id Required parameter: An identifier for the
    # remote customer
    # @param [PostContractModel] body Required parameter: Example:
    # @return [CreateContractResponseModel] response from the API call
    def create_contract(x_customer_id,
                        body)
      begin
        @logger.info("create_contract called.")
        # Prepare query url.
        @logger.info("Preparing query URL for create_contract.")
        _query_builder = config.get_base_uri
        _query_builder << '/contracts/'
        _query_url = APIHelper.clean_url _query_builder
  
        # Prepare headers.
        @logger.info("Preparing headers for create_contract.")
        _headers = {
          'accept' => 'application/json',
          'X-Customer-Id' => x_customer_id,
          'Content-Type' => 'application/json'
        }
  
        # Prepare and execute HttpRequest.
        @logger.info('Preparing and executing HttpRequest for create_contract.')
        _request = config.http_client.post(
          _query_url,
          headers: _headers,
          parameters: body.to_json
        )
        _response = execute_request(_request, name: 'create_contract')
  
        # Validate response against endpoint and global error codes.
        @logger.info("Validating response for create_contract.")
        case _response.status_code
        when 400
          raise APIException.new(
            '',
            _response
          )
        end
        validate_response(_response)
  
        # Return appropriate response type.
        @logger.info("Returning response for create_contract.")
        decoded = APIHelper.json_deserialize(_response.raw_body)
        CreateContractResponseModel.from_hash(decoded)

      rescue Exception => e
        @logger.error(e)
        raise e
      end
    end

    # This endpoint deletes a contract.
    #  HAPI doesn't support contract editing, because job boards require the
    # same credentials to be able to delete already posted jobs via that
    # contract at a later moment. Otherwise, deleting jobs would not be
    # possible. To edit contract credentials, the credentials need to be deleted
    # first, and then recreated. When deleted, all corresponding jobs can't be
    # deleted anymore
    # @param [String] contract_id Required parameter: Example:
    # @param [String] x_customer_id Required parameter: An identifier for the
    # remote customer
    # @return [void] response from the API call
    def delete_contract(contract_id,
                        x_customer_id)
      begin
        @logger.info("delete_contract called.")
        # Prepare query url.
        @logger.info("Preparing query URL for delete_contract.")
        _query_builder = config.get_base_uri
        _query_builder << '/contracts/{contract_id}/'
        _query_builder = APIHelper.append_url_with_template_parameters(
          _query_builder,
          'contract_id' => { 'value' => contract_id, 'encode' => true }
        )
        _query_url = APIHelper.clean_url _query_builder
  
        # Prepare headers.
        @logger.info("Preparing headers for delete_contract.")
        _headers = {
          'X-Customer-Id' => x_customer_id
        }
  
        # Prepare and execute HttpRequest.
        @logger.info('Preparing and executing HttpRequest for delete_contract.')
        _request = config.http_client.delete(
          _query_url,
          headers: _headers
        )
        _response = execute_request(_request, name: 'delete_contract')
        validate_response(_response)

      rescue Exception => e
        @logger.error(e)
        raise e
      end
    end

    # This endpoint retrieves the detail for a customer contract. It contains a
    # reference to a channel, an (encrypted) credential payload, and the facets
    # set for the My Contracts product.
    # @param [String] contract_id Required parameter: Example:
    # @param [String] x_customer_id Required parameter: An identifier for the
    # remote customer
    # @return [ContractModel] response from the API call
    def retrieve_contract(contract_id,
                          x_customer_id)
      begin
        @logger.info("retrieve_contract called.")
        # Prepare query url.
        @logger.info("Preparing query URL for retrieve_contract.")
        _query_builder = config.get_base_uri
        _query_builder << '/contracts/single/{contract_id}/'
        _query_builder = APIHelper.append_url_with_template_parameters(
          _query_builder,
          'contract_id' => { 'value' => contract_id, 'encode' => true }
        )
        _query_url = APIHelper.clean_url _query_builder
  
        # Prepare headers.
        @logger.info("Preparing headers for retrieve_contract.")
        _headers = {
          'accept' => 'application/json',
          'X-Customer-Id' => x_customer_id
        }
  
        # Prepare and execute HttpRequest.
        @logger.info('Preparing and executing HttpRequest for retrieve_contract.')
        _request = config.http_client.get(
          _query_url,
          headers: _headers
        )
        _response = execute_request(_request, name: 'retrieve_contract')
        validate_response(_response)
  
        # Return appropriate response type.
        @logger.info("Returning response for retrieve_contract.")
        decoded = APIHelper.json_deserialize(_response.raw_body)
        ContractModel.from_hash(decoded)

      rescue Exception => e
        @logger.error(e)
        raise e
      end
    end

    # This endpoint exposes a list of multiple contracts, if available to a
    # specific customer.
    # @param [List of String] contracts_ids Required parameter: Example:
    # @param [Float] limit Optional parameter: Amount of contracts returned
    # @param [Float] offset Optional parameter: Starting point
    # @return [MultipleContractsResponseModel] response from the API call
    def retrieve_multiple_contracts(contracts_ids,
                                    limit: nil,
                                    offset: nil)
      begin
        @logger.info("retrieve_multiple_contracts called.")
        # Prepare query url.
        @logger.info("Preparing query URL for retrieve_multiple_contracts.")
        _query_builder = config.get_base_uri
        _query_builder << '/contracts/multiple/{contracts_ids}/'
        _query_builder = APIHelper.append_url_with_template_parameters(
          _query_builder,
          'contracts_ids' => { 'value' => contracts_ids, 'encode' => true }
        )
        _query_builder = APIHelper.append_url_with_query_parameters(
          _query_builder,
          'limit' => limit,
          'offset' => offset
        )
        _query_url = APIHelper.clean_url _query_builder
  
        # Prepare headers.
        @logger.info("Preparing headers for retrieve_multiple_contracts.")
        _headers = {
          'accept' => 'application/json'
        }
  
        # Prepare and execute HttpRequest.
        @logger.info('Preparing and executing HttpRequest for retrieve_multiple_contracts.')
        _request = config.http_client.get(
          _query_url,
          headers: _headers
        )
        _response = execute_request(_request, name: 'retrieve_multiple_contracts')
        validate_response(_response)
  
        # Return appropriate response type.
        @logger.info("Returning response for retrieve_multiple_contracts.")
        decoded = APIHelper.json_deserialize(_response.raw_body)
        MultipleContractsResponseModel.from_hash(decoded)

      rescue Exception => e
        @logger.error(e)
        raise e
      end
    end

    # This endpoint exposes autocomplete items given a `channel_id` and a
    # posting requirement name.
    # @param [Float] channel_id Required parameter: channel_id (number,
    # required)
    # @param [String] posting_requirement_name Required parameter: Example:
    # @param [FacetAutocompleteModel] body Required parameter: Example:
    # @return [List of AutocompleteValuesResponseModel] response from the API call
    def list_autocomplete_values(channel_id,
                                 posting_requirement_name,
                                 body)
      begin
        @logger.info("list_autocomplete_values called.")
        # Prepare query url.
        @logger.info("Preparing query URL for list_autocomplete_values.")
        _query_builder = config.get_base_uri
        _query_builder << '/contracts/posting-requirements/{channel_id}/{posting-requirement-name}/'
        _query_builder = APIHelper.append_url_with_template_parameters(
          _query_builder,
          'channel_id' => { 'value' => channel_id, 'encode' => true },
          'posting-requirement-name' => { 'value' => posting_requirement_name, 'encode' => true }
        )
        _query_url = APIHelper.clean_url _query_builder
  
        # Prepare headers.
        @logger.info("Preparing headers for list_autocomplete_values.")
        _headers = {
          'accept' => 'application/json',
          'Content-Type' => 'application/json'
        }
  
        # Prepare and execute HttpRequest.
        @logger.info('Preparing and executing HttpRequest for list_autocomplete_values.')
        _request = config.http_client.post(
          _query_url,
          headers: _headers,
          parameters: body.to_json
        )
        _response = execute_request(_request, name: 'list_autocomplete_values')
  
        # Validate response against endpoint and global error codes.
        @logger.info("Validating response for list_autocomplete_values.")
        case _response.status_code
        when 400
          raise APIException.new(
            '',
            _response
          )
        end
        validate_response(_response)
  
        # Return appropriate response type.
        @logger.info("Returning response for list_autocomplete_values.")
        decoded = APIHelper.json_deserialize(_response.raw_body)
        decoded.map { |element| AutocompleteValuesResponseModel.from_hash(element) }

      rescue Exception => e
        @logger.error(e)
        raise e
      end
    end
  end
end
