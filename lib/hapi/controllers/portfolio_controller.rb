# hapi
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Hapi
  # PortfolioController
  class PortfolioController < BaseController
    def initialize(config, http_call_back: nil)
      super(config, http_call_back: http_call_back)
    end

    # For a detailed tutorial on how to get started with portfolio search v2,
    # check out our [Quickstart
    # Tutorial](https://pkb.stoplight.io/docs/search/docs/Tutorial.md).
    # For an implementation demo of the product search experience, check out our
    # [Developer Portal](http://vonq.io/pkb).
    # This endpoint exposes a list of Products with the options to search by
    # Location, Job Title, Job Function and Industry.
    # Products are ranked by their relevancy to the search terms.
    # Optionally, products can filtered by Location.
    # Values for each parameter can be fetched by calling the other endpoints in
    # this section.
    # Calling this endpoint will guarantee that the Products you see are
    # configured for you as our Partner.
    # Besides the default English, German and Dutch result translations can be
    # requested by specifying an `Accept-Language: [de|nl]` header.
    # @param [Integer] limit Optional parameter: Number of results to return per
    # page.
    # @param [Integer] offset Optional parameter: The initial index from which
    # to return the results.
    # @param [List of String] include_location_id Optional parameter: Id for a
    # Location to search products against. If no exact matches exist, search
    # will be expanded to the Location's region and country. Optionally, a
    # (comma-separated) array of values can be passed. Passing multiple values
    # increases the number of search results.
    # @param [String] exact_location_id Optional parameter: Match only products
    # specifically assigned to a Location.
    # @param [String] job_function_id Optional parameter: Job Function id. Not
    # to be used in conjunction with a Job Title id.
    # @param [String] job_title_id Optional parameter: Job title id
    # @param [List of String] industry_id Optional parameter: Industry Id
    # @param [String] duration_from Optional parameter: Match only products with
    # a duration more or equal than a certain number of days
    # @param [String] duration_to Optional parameter: Match only products with a
    # duration up to a certain number of days
    # @param [String] name Optional parameter: Search text for a product name
    # @param [String] currency Optional parameter: ISO-4217 code for a
    # currency
    # @param [SortByEnum] sort_by Optional parameter: Which products to show
    # first. Defaults to 'relevant'
    # @param [Boolean] recommended Optional parameter: Whether to display a list
    # of recommended products for the search parameters. If true, returns a
    # limited list of products for the types: Job board, social media,
    # publication and community.
    # @param [Boolean] mc_enabled Optional parameter: Can be used to filter for
    # products that are linked to a channel enabled for My Contracts orders
    # @param [AcceptLanguageEnum] accept_language Optional parameter: Example:
    # @param [Boolean] exclude_recommended Optional parameter: Exclude
    # recommended products from search results. Cannot be used in combination
    # with 'recommended'.
    # @return [List of ProductModel] response from the API call
    def search_products(limit: nil,
                        offset: nil,
                        include_location_id: nil,
                        exact_location_id: nil,
                        job_function_id: nil,
                        job_title_id: nil,
                        industry_id: nil,
                        duration_from: nil,
                        duration_to: nil,
                        name: nil,
                        currency: nil,
                        sort_by: SortByEnum::RELEVANT,
                        recommended: nil,
                        mc_enabled: nil,
                        accept_language: nil,
                        exclude_recommended: false)
      begin
        @logger.info("search_products called.")
        # Prepare query url.
        @logger.info("Preparing query URL for search_products.")
        _query_builder = config.get_base_uri
        _query_builder << '/products/search/'
        _query_builder = APIHelper.append_url_with_query_parameters(
          _query_builder,
          'limit' => limit,
          'offset' => offset,
          'includeLocationId' => include_location_id,
          'exactLocationId' => exact_location_id,
          'jobFunctionId' => job_function_id,
          'jobTitleId' => job_title_id,
          'industryId' => industry_id,
          'durationFrom' => duration_from,
          'durationTo' => duration_to,
          'name' => name,
          'currency' => currency,
          'sortBy' => sort_by,
          'recommended' => recommended,
          'mcEnabled' => mc_enabled,
          'excludeRecommended' => exclude_recommended
        )
        _query_url = APIHelper.clean_url _query_builder
  
        # Prepare headers.
        @logger.info("Preparing headers for search_products.")
        _headers = {
          'accept' => 'application/json',
          'Accept-Language' => accept_language
        }
  
        # Prepare and execute HttpRequest.
        @logger.info('Preparing and executing HttpRequest for search_products.')
        _request = config.http_client.get(
          _query_url,
          headers: _headers
        )
        _response = execute_request(_request, name: 'search_products')
  
        # Validate response against endpoint and global error codes.
        @logger.info("Validating response for search_products.")
        case _response.status_code
        when 400
          raise APIException.new(
            '',
            _response
          )
        end
        validate_response(_response)
  
        # Return appropriate response type.
        @logger.info("Returning response for search_products.")
        decoded = APIHelper.json_deserialize(_response.raw_body)
        decoded.map { |element| ProductModel.from_hash(element) }

      rescue Exception => e
        @logger.error(e)
        raise e
      end
    end

    # Sometimes you already have access to the Identification code of any
    # particular Product and you want to retrieve the most up-to-date
    # information about it.
    # Besides the default English, German and Dutch result translations can be
    # requested by specifying an `Accept-Language: [de|nl]` header.
    # @param [String] product_id Required parameter: Example:
    # @param [AcceptLanguageEnum] accept_language Optional parameter: Example:
    # @return [ProductModel] response from the API call
    def retrieve_single_product(product_id,
                                accept_language: nil)
      begin
        @logger.info("retrieve_single_product called.")
        # Prepare query url.
        @logger.info("Preparing query URL for retrieve_single_product.")
        _query_builder = config.get_base_uri
        _query_builder << '/products/single/{product_id}/'
        _query_builder = APIHelper.append_url_with_template_parameters(
          _query_builder,
          'product_id' => { 'value' => product_id, 'encode' => true }
        )
        _query_url = APIHelper.clean_url _query_builder
  
        # Prepare headers.
        @logger.info("Preparing headers for retrieve_single_product.")
        _headers = {
          'accept' => 'application/json',
          'Accept-Language' => accept_language
        }
  
        # Prepare and execute HttpRequest.
        @logger.info('Preparing and executing HttpRequest for retrieve_single_product.')
        _request = config.http_client.get(
          _query_url,
          headers: _headers
        )
        _response = execute_request(_request, name: 'retrieve_single_product')
        validate_response(_response)
  
        # Return appropriate response type.
        @logger.info("Returning response for retrieve_single_product.")
        decoded = APIHelper.json_deserialize(_response.raw_body)
        ProductModel.from_hash(decoded)

      rescue Exception => e
        @logger.error(e)
        raise e
      end
    end

    # Sometimes you already have access to the Identification codes of more than
    # one Product and you want to retrieve the most up-to-date information about
    # them.
    # Besides the default English, German and Dutch result translations can be
    # requested by specifying an `Accept-Language: [de|nl]` header.
    # @param [List of String] products_ids Required parameter: Example:
    # @param [AcceptLanguageEnum] accept_language Optional parameter: Example:
    # @return [List of ProductModel] response from the API call
    def retrieve_multiple_products(products_ids,
                                   accept_language: nil)
      begin
        @logger.info("retrieve_multiple_products called.")
        # Prepare query url.
        @logger.info("Preparing query URL for retrieve_multiple_products.")
        _query_builder = config.get_base_uri
        _query_builder << '/products/multiple/{products_ids}/'
        _query_builder = APIHelper.append_url_with_template_parameters(
          _query_builder,
          'products_ids' => { 'value' => products_ids, 'encode' => true }
        )
        _query_url = APIHelper.clean_url _query_builder
  
        # Prepare headers.
        @logger.info("Preparing headers for retrieve_multiple_products.")
        _headers = {
          'accept' => 'application/json',
          'Accept-Language' => accept_language
        }
  
        # Prepare and execute HttpRequest.
        @logger.info('Preparing and executing HttpRequest for retrieve_multiple_products.')
        _request = config.http_client.get(
          _query_url,
          headers: _headers
        )
        _response = execute_request(_request, name: 'retrieve_multiple_products')
        validate_response(_response)
  
        # Return appropriate response type.
        @logger.info("Returning response for retrieve_multiple_products.")
        decoded = APIHelper.json_deserialize(_response.raw_body)
        decoded.map { |element| ProductModel.from_hash(element) }

      rescue Exception => e
        @logger.error(e)
        raise e
      end
    end

    # This endpoint calculates total number of days to process and setup a
    # campaign containing a list of Products, given a comma-separated list of
    # their ids.
    # @param [List of String] products_ids Required parameter: Example:
    # @return [List of ProductsDeliveryTimeModel] response from the API call
    def calculate_order_delivery_time(products_ids)
      begin
        @logger.info("calculate_order_delivery_time called.")
        # Prepare query url.
        @logger.info("Preparing query URL for calculate_order_delivery_time.")
        _query_builder = config.get_base_uri
        _query_builder << '/products/delivery-time/{products_ids}/'
        _query_builder = APIHelper.append_url_with_template_parameters(
          _query_builder,
          'products_ids' => { 'value' => products_ids, 'encode' => true }
        )
        _query_url = APIHelper.clean_url _query_builder
  
        # Prepare headers.
        @logger.info("Preparing headers for calculate_order_delivery_time.")
        _headers = {
          'accept' => 'application/json'
        }
  
        # Prepare and execute HttpRequest.
        @logger.info('Preparing and executing HttpRequest for calculate_order_delivery_time.')
        _request = config.http_client.get(
          _query_url,
          headers: _headers
        )
        _response = execute_request(_request, name: 'calculate_order_delivery_time')
        validate_response(_response)
  
        # Return appropriate response type.
        @logger.info("Returning response for calculate_order_delivery_time.")
        decoded = APIHelper.json_deserialize(_response.raw_body)
        decoded.map { |element| ProductsDeliveryTimeModel.from_hash(element) }

      rescue Exception => e
        @logger.error(e)
        raise e
      end
    end
  end
end
