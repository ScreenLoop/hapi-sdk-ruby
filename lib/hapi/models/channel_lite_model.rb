# hapi
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Hapi
  # ChannelLiteModel Model.
  class ChannelLiteModel < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :mc_enabled

    # TODO: Write general description for this method
    # @return [Integer]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :url

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :type

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['mc_enabled'] = 'mc_enabled'
      @_hash['id'] = 'id'
      @_hash['name'] = 'name'
      @_hash['url'] = 'url'
      @_hash['type'] = 'type'
      @_hash
    end

    # An array for optional fields
    def optionals
      []
    end

    # An array for nullable fields
    def nullables
      []
    end

    def initialize(mc_enabled = nil,
                   id = nil,
                   name = nil,
                   url = nil,
                   type = nil,
                   additional_properties = {})
      @mc_enabled = mc_enabled unless mc_enabled == SKIP
      @id = id unless id == SKIP
      @name = name unless name == SKIP
      @url = url unless url == SKIP
      @type = type unless type == SKIP

      # Add additional model properties to the instance.
      additional_properties.each do |_name, _value|
        instance_variable_set("@#{_name}", _value)
      end
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      mc_enabled = hash.key?('mc_enabled') ? hash['mc_enabled'] : SKIP
      id = hash.key?('id') ? hash['id'] : SKIP
      name = hash.key?('name') ? hash['name'] : SKIP
      url = hash.key?('url') ? hash['url'] : SKIP
      type = hash.key?('type') ? hash['type'] : SKIP

      # Clean out expected properties from Hash.
      names.each_value { |k| hash.delete(k) }

      # Create object from extracted values.
      ChannelLiteModel.new(mc_enabled,
                           id,
                           name,
                           url,
                           type,
                           hash)
    end
  end
end
