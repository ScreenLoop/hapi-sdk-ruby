# hapi
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Hapi
  # JobFunctionTreeModel Model.
  class JobFunctionTreeModel < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [Float]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :name

    # TODO: Write general description for this method
    # @return [List of JobFunctionTreeModel]
    attr_accessor :children

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['name'] = 'name'
      @_hash['children'] = 'children'
      @_hash
    end

    # An array for optional fields
    def optionals
      []
    end

    # An array for nullable fields
    def nullables
      []
    end

    def initialize(id = nil,
                   name = nil,
                   children = nil,
                   additional_properties = {})
      @id = id unless id == SKIP
      @name = name unless name == SKIP
      @children = children unless children == SKIP

      # Add additional model properties to the instance.
      additional_properties.each do |_name, _value|
        instance_variable_set("@#{_name}", _value)
      end
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('id') ? hash['id'] : SKIP
      name = hash.key?('name') ? hash['name'] : SKIP
      # Parameter is an array, so we need to iterate through it
      children = nil
      unless hash['children'].nil?
        children = []
        hash['children'].each do |structure|
          children << (JobFunctionTreeModel.from_hash(structure) if structure)
        end
      end

      children = SKIP unless hash.key?('children')

      # Clean out expected properties from Hash.
      names.each_value { |k| hash.delete(k) }

      # Create object from extracted values.
      JobFunctionTreeModel.new(id,
                               name,
                               children,
                               hash)
    end
  end
end
