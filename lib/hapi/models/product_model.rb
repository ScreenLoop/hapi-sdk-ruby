# hapi
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Hapi
  # ProductModel Model.
  class ProductModel < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :title

    # TODO: Write general description for this method
    # @return [List of LocationModel]
    attr_accessor :locations

    # TODO: Write general description for this method
    # @return [List of JobFunctionModel]
    attr_accessor :job_functions

    # TODO: Write general description for this method
    # @return [List of IndustryModel]
    attr_accessor :industries

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :description

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :homepage

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :logo_url

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :logo_square_url

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :logo_rectangle_url

    # TODO: Write general description for this method
    # @return [Object]
    attr_accessor :duration

    # TODO: Write general description for this method
    # @return [TimeToProcessModel]
    attr_accessor :time_to_process

    # TODO: Write general description for this method
    # @return [TimeToSetupModel]
    attr_accessor :time_to_setup

    # TODO: Write general description for this method
    # @return [UUID | String]
    attr_accessor :product_id

    # the price to be displayed to customers
    # @return [List of PriceModel]
    attr_accessor :vonq_price

    # the price to be displayed to customers
    # @return [List of PriceModel]
    attr_accessor :ratecard_price

    # The type of a channel
    # @return [ChannelTypeEnum]
    attr_accessor :type

    # The type of a channel
    # @return [List of String]
    attr_accessor :cross_postings

    # The type of a channel
    # @return [ChannelModel]
    attr_accessor :channel

    # The product's audience group (niche/generic)
    # @return [AudienceGroupEnum]
    attr_accessor :audience_group

    # is My Contract enabled for the channel
    # @return [Boolean]
    attr_accessor :mc_enabled

    # is the product available only for My Contract order
    # @return [Boolean]
    attr_accessor :mc_only

    # is the product available for order. a campaign cannot be ordered with a
    # product having `allow_orders` set to `false`.
    # @return [Boolean]
    attr_accessor :allow_orders

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['title'] = 'title'
      @_hash['locations'] = 'locations'
      @_hash['job_functions'] = 'job_functions'
      @_hash['industries'] = 'industries'
      @_hash['description'] = 'description'
      @_hash['homepage'] = 'homepage'
      @_hash['logo_url'] = 'logo_url'
      @_hash['logo_square_url'] = 'logo_square_url'
      @_hash['logo_rectangle_url'] = 'logo_rectangle_url'
      @_hash['duration'] = 'duration'
      @_hash['time_to_process'] = 'time_to_process'
      @_hash['time_to_setup'] = 'time_to_setup'
      @_hash['product_id'] = 'product_id'
      @_hash['vonq_price'] = 'vonq_price'
      @_hash['ratecard_price'] = 'ratecard_price'
      @_hash['type'] = 'type'
      @_hash['cross_postings'] = 'cross_postings'
      @_hash['channel'] = 'channel'
      @_hash['audience_group'] = 'audience_group'
      @_hash['mc_enabled'] = 'mc_enabled'
      @_hash['mc_only'] = 'mc_only'
      @_hash['allow_orders'] = 'allow_orders'
      @_hash
    end

    # An array for optional fields
    def optionals
      %w[
        description
        homepage
        logo_url
        logo_square_url
        logo_rectangle_url
        duration
      ]
    end

    # An array for nullable fields
    def nullables
      %w[
        description
        homepage
        logo_url
        logo_square_url
        logo_rectangle_url
        duration
      ]
    end

    def initialize(title = nil,
                   locations = nil,
                   job_functions = nil,
                   industries = nil,
                   time_to_process = nil,
                   time_to_setup = nil,
                   product_id = nil,
                   vonq_price = nil,
                   ratecard_price = nil,
                   type = nil,
                   cross_postings = nil,
                   channel = nil,
                   audience_group = nil,
                   mc_enabled = nil,
                   mc_only = nil,
                   allow_orders = nil,
                   description = nil,
                   homepage = nil,
                   logo_url = nil,
                   logo_square_url = nil,
                   logo_rectangle_url = nil,
                   duration = nil,
                   additional_properties = {})
      @title = title unless title == SKIP
      @locations = locations unless locations == SKIP
      @job_functions = job_functions unless job_functions == SKIP
      @industries = industries unless industries == SKIP
      @description = description unless description == SKIP
      @homepage = homepage unless homepage == SKIP
      @logo_url = logo_url unless logo_url == SKIP
      @logo_square_url = logo_square_url unless logo_square_url == SKIP
      @logo_rectangle_url = logo_rectangle_url unless logo_rectangle_url == SKIP
      @duration = duration unless duration == SKIP
      @time_to_process = time_to_process unless time_to_process == SKIP
      @time_to_setup = time_to_setup unless time_to_setup == SKIP
      @product_id = product_id unless product_id == SKIP
      @vonq_price = vonq_price unless vonq_price == SKIP
      @ratecard_price = ratecard_price unless ratecard_price == SKIP
      @type = type unless type == SKIP
      @cross_postings = cross_postings unless cross_postings == SKIP
      @channel = channel unless channel == SKIP
      @audience_group = audience_group unless audience_group == SKIP
      @mc_enabled = mc_enabled unless mc_enabled == SKIP
      @mc_only = mc_only unless mc_only == SKIP
      @allow_orders = allow_orders unless allow_orders == SKIP

      # Add additional model properties to the instance.
      additional_properties.each do |_name, _value|
        instance_variable_set("@#{_name}", _value)
      end
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      title = hash.key?('title') ? hash['title'] : SKIP
      # Parameter is an array, so we need to iterate through it
      locations = nil
      unless hash['locations'].nil?
        locations = []
        hash['locations'].each do |structure|
          locations << (LocationModel.from_hash(structure) if structure)
        end
      end

      locations = SKIP unless hash.key?('locations')
      # Parameter is an array, so we need to iterate through it
      job_functions = nil
      unless hash['job_functions'].nil?
        job_functions = []
        hash['job_functions'].each do |structure|
          job_functions << (JobFunctionModel.from_hash(structure) if structure)
        end
      end

      job_functions = SKIP unless hash.key?('job_functions')
      # Parameter is an array, so we need to iterate through it
      industries = nil
      unless hash['industries'].nil?
        industries = []
        hash['industries'].each do |structure|
          industries << (IndustryModel.from_hash(structure) if structure)
        end
      end

      industries = SKIP unless hash.key?('industries')
      time_to_process = TimeToProcessModel.from_hash(hash['time_to_process']) if
        hash['time_to_process']
      time_to_setup = TimeToSetupModel.from_hash(hash['time_to_setup']) if hash['time_to_setup']
      product_id = hash.key?('product_id') ? hash['product_id'] : SKIP
      # Parameter is an array, so we need to iterate through it
      vonq_price = nil
      unless hash['vonq_price'].nil?
        vonq_price = []
        hash['vonq_price'].each do |structure|
          vonq_price << (PriceModel.from_hash(structure) if structure)
        end
      end

      vonq_price = SKIP unless hash.key?('vonq_price')
      # Parameter is an array, so we need to iterate through it
      ratecard_price = nil
      unless hash['ratecard_price'].nil?
        ratecard_price = []
        hash['ratecard_price'].each do |structure|
          ratecard_price << (PriceModel.from_hash(structure) if structure)
        end
      end

      ratecard_price = SKIP unless hash.key?('ratecard_price')
      type = hash.key?('type') ? hash['type'] : SKIP
      cross_postings =
        hash.key?('cross_postings') ? hash['cross_postings'] : SKIP
      channel = ChannelModel.from_hash(hash['channel']) if hash['channel']
      audience_group =
        hash.key?('audience_group') ? hash['audience_group'] : SKIP
      mc_enabled = hash.key?('mc_enabled') ? hash['mc_enabled'] : SKIP
      mc_only = hash.key?('mc_only') ? hash['mc_only'] : SKIP
      allow_orders = hash.key?('allow_orders') ? hash['allow_orders'] : SKIP
      description = hash.key?('description') ? hash['description'] : SKIP
      homepage = hash.key?('homepage') ? hash['homepage'] : SKIP
      logo_url = hash.key?('logo_url') ? hash['logo_url'] : SKIP
      logo_square_url =
        hash.key?('logo_square_url') ? hash['logo_square_url'] : SKIP
      logo_rectangle_url =
        hash.key?('logo_rectangle_url') ? hash['logo_rectangle_url'] : SKIP
      duration = hash.key?('duration') ? hash['duration'] : SKIP

      # Clean out expected properties from Hash.
      names.each_value { |k| hash.delete(k) }

      # Create object from extracted values.
      ProductModel.new(title,
                       locations,
                       job_functions,
                       industries,
                       time_to_process,
                       time_to_setup,
                       product_id,
                       vonq_price,
                       ratecard_price,
                       type,
                       cross_postings,
                       channel,
                       audience_group,
                       mc_enabled,
                       mc_only,
                       allow_orders,
                       description,
                       homepage,
                       logo_url,
                       logo_square_url,
                       logo_rectangle_url,
                       duration,
                       hash)
    end
  end
end
