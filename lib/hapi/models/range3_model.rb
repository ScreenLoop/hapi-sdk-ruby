# hapi
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Hapi
  # Range3Model Model.
  class Range3Model < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Minimum salary indication of the indicated period, if given, cannot be
    # greater
    # than 'to', but equal to 'to' is allowed. This integer value should be
    # specified in units (not cents).
    # @return [Float]
    attr_accessor :from

    # Maximum salary indication of the indicated period. This integer value
    # should be specified in units (not cents).
    # @return [Float]
    attr_accessor :to

    # The currency in which the range amount is expressed. Must be a valid
    # ISO-4217 value.
    # @return [String]
    attr_accessor :currency

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['from'] = 'from'
      @_hash['to'] = 'to'
      @_hash['currency'] = 'currency'
      @_hash
    end

    # An array for optional fields
    def optionals
      %w[
        from
        currency
      ]
    end

    # An array for nullable fields
    def nullables
      []
    end

    def initialize(to = nil,
                   from = nil,
                   currency = nil,
                   additional_properties = {})
      @from = from unless from == SKIP
      @to = to unless to == SKIP
      @currency = currency unless currency == SKIP

      # Add additional model properties to the instance.
      additional_properties.each do |_name, _value|
        instance_variable_set("@#{_name}", _value)
      end
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      to = hash.key?('to') ? hash['to'] : SKIP
      from = hash.key?('from') ? hash['from'] : SKIP
      currency = hash.key?('currency') ? hash['currency'] : SKIP

      # Clean out expected properties from Hash.
      names.each_value { |k| hash.delete(k) }

      # Create object from extracted values.
      Range3Model.new(to,
                      from,
                      currency,
                      hash)
    end
  end
end
