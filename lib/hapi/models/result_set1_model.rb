# hapi
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Hapi
  # ResultSet1Model Model.
  class ResultSet1Model < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Number of total results
    # @return [Float]
    attr_accessor :total

    # Results page size
    # @return [Float]
    attr_accessor :limit

    # Initial starting index for the results
    # @return [Float]
    attr_accessor :offset

    # A Page of Campaign Objects
    # @return [List of CampaignModel]
    attr_accessor :data

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['total'] = 'total'
      @_hash['limit'] = 'limit'
      @_hash['offset'] = 'offset'
      @_hash['data'] = 'data'
      @_hash
    end

    # An array for optional fields
    def optionals
      %w[
        total
        limit
        offset
        data
      ]
    end

    # An array for nullable fields
    def nullables
      []
    end

    def initialize(total = nil,
                   limit = nil,
                   offset = nil,
                   data = nil,
                   additional_properties = {})
      @total = total unless total == SKIP
      @limit = limit unless limit == SKIP
      @offset = offset unless offset == SKIP
      @data = data unless data == SKIP

      # Add additional model properties to the instance.
      additional_properties.each do |_name, _value|
        instance_variable_set("@#{_name}", _value)
      end
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      total = hash.key?('total') ? hash['total'] : SKIP
      limit = hash.key?('limit') ? hash['limit'] : SKIP
      offset = hash.key?('offset') ? hash['offset'] : SKIP
      # Parameter is an array, so we need to iterate through it
      data = nil
      unless hash['data'].nil?
        data = []
        hash['data'].each do |structure|
          data << (CampaignModel.from_hash(structure) if structure)
        end
      end

      data = SKIP unless hash.key?('data')

      # Clean out expected properties from Hash.
      names.each_value { |k| hash.delete(k) }

      # Create object from extracted values.
      ResultSet1Model.new(total,
                          limit,
                          offset,
                          data,
                          hash)
    end
  end
end
