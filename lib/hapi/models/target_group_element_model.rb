# hapi
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module Hapi
  # TargetGroupElementModel Model.
  class TargetGroupElementModel < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # The vonq name for this target group element
    # @return [String]
    attr_accessor :description

    # The Vonq ID representing this concept, as indicated in the [**`Taxonomy
    # Endpoints`**](#reference/experimental-products-search)
    # @return [String]
    attr_accessor :vonq_id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['description'] = 'description'
      @_hash['vonq_id'] = 'vonqId'
      @_hash
    end

    # An array for optional fields
    def optionals
      []
    end

    # An array for nullable fields
    def nullables
      []
    end

    def initialize(description = nil,
                   vonq_id = nil,
                   additional_properties = {})
      @description = description unless description == SKIP
      @vonq_id = vonq_id unless vonq_id == SKIP

      # Add additional model properties to the instance.
      additional_properties.each do |_name, _value|
        instance_variable_set("@#{_name}", _value)
      end
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      description = hash.key?('description') ? hash['description'] : SKIP
      vonq_id = hash.key?('vonqId') ? hash['vonqId'] : SKIP

      # Clean out expected properties from Hash.
      names.each_value { |k| hash.delete(k) }

      # Create object from extracted values.
      TargetGroupElementModel.new(description,
                                  vonq_id,
                                  hash)
    end
  end
end
