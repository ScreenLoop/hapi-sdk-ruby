# hapi
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'controller_test_base'

class PortfolioControllerTests < ControllerTestBase
  # Called only once for the class before any test has executed
  def setup
    @response_catcher = HttpResponseCatcher.new
    @controller = PortfolioController.new CONFIG, http_call_back: @response_catcher
  end

  # For a detailed tutorial on how to get started with portfolio search v2, check out our [Quickstart Tutorial](https://pkb.stoplight.io/docs/search/docs/Tutorial.md).
  #For an implementation demo of the product search experience, check out our [Developer Portal](http://vonq.io/pkb).
  #This endpoint exposes a list of Products with the options to search by Location, Job Title, Job Function and Industry.
  #Products are ranked by their relevancy to the search terms.
  #Optionally, products can filtered by Location.
  #Values for each parameter can be fetched by calling the other endpoints in this section.
  #Calling this endpoint will guarantee that the Products you see are configured for you as our Partner.
  #Besides the default English, German and Dutch result translations can be requested by specifying an `Accept-Language: [de|nl]` header.
  def test_search_products()
    # Parameters for the API call
    limit = nil
    offset = nil
    include_location_id = nil
    exact_location_id = nil
    job_function_id = nil
    job_title_id = nil
    industry_id = nil
    duration_from = nil
    duration_to = nil
    name = nil
    currency = nil
    sort_by = 'relevant'
    recommended = nil
    mc_enabled = nil
    accept_language = 'en'
    exclude_recommended = false

    # Perform the API call through the SDK function
    result = @controller.search_products(limit: limit, offset: offset, include_location_id: include_location_id, exact_location_id: exact_location_id, job_function_id: job_function_id, job_title_id: job_title_id, industry_id: industry_id, duration_from: duration_from, duration_to: duration_to, name: name, currency: currency, sort_by: sort_by, recommended: recommended, mc_enabled: mc_enabled, accept_language: accept_language, exclude_recommended: exclude_recommended)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

end
