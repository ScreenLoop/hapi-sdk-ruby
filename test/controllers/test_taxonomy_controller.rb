# hapi
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'controller_test_base'

class TaxonomyControllerTests < ControllerTestBase
  # Called only once for the class before any test has executed
  def setup
    @response_catcher = HttpResponseCatcher.new
    @controller = TaxonomyController.new CONFIG, http_call_back: @response_catcher
  end

  # This endpoint returns a tree-like structure of supported Job Functions that can be used to search for Products.
  #Use the `id` key of any Job Function in the response to search for a Product.
  #Each Job Function is associated with [**`Job Titles`**](b3A6MzM0NDA3MzY-job-titles) in a one-to-many fashion.
  #Besides the default English, German and Dutch result translations can be requested by specifying an `Accept-Language: [de|nl]` header.
  def test_retrieve_job_functions_tree()
    # Parameters for the API call
    accept_language = 'en'

    # Perform the API call through the SDK function
    result = @controller.retrieve_job_functions_tree(accept_language: accept_language)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '[{"id":8,"name":"Education","children":[{"id":5,"name":"Teaching","chil'\
      'dren":[]}]}]'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # This endpoint returns a list of supported industry names that can be used to search for products. Results are ordered alphabetically.
  #Use the `id` key of any Industry in the response to search for a product.
  #Besides the default English, German and Dutch result translations can be requested by specifying an `Accept-Language: [de|nl]` header.
  def test_list_industries()
    # Parameters for the API call
    limit = nil
    offset = nil
    accept_language = 'en'

    # Perform the API call through the SDK function
    result = @controller.list_industries(limit: limit, offset: offset, accept_language: accept_language)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))
  end

  # Retrieve all Education Level possible values.
  def test_retrieve_education_levels()

    # Perform the API call through the SDK function
    result = @controller.retrieve_education_levels()

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '[{"id":1,"name":[{"languageCode":"nl_NL","value":"Master / Postdoctoraa'\
      'l"}]}]'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

  # Retrieve all Seniority possible values.
  def test_retrieve_seniorities()

    # Perform the API call through the SDK function
    result = @controller.retrieve_seniorities()

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test headers
    expected_headers = {}
    expected_headers['content-type'] = 'application/json'

    assert(TestHelper.match_headers(expected_headers, @response_catcher.response.headers))

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '[{"id":3,"name":[{"languageCode":"en_GB","value":"Manager"}]}]'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(TestHelper.match_body(expected_body, received_body))
  end

end
